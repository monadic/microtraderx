#!/bin/bash
set -e

echo "🚀 MicroTraderX: Deploying to Kubernetes..."
echo ""

# Color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Get prefix
if [ ! -x "bin/get-prefix" ]; then
  echo "❌ Error: bin/get-prefix not found"
  echo "   Run ./setup-structure first"
  exit 1
fi

PREFIX=$(bin/get-prefix)
echo "📛 Using prefix: $PREFIX"
echo ""

# Stage selection
STAGE=${1:-7}

echo -e "${BLUE}Stage $STAGE: Deploying...${NC}"
echo ""

case $STAGE in
  1)
    echo "Stage 1: Deploy to single space"

    # Create confighub namespace
    kubectl create namespace confighub --dry-run=client -o yaml | kubectl apply -f - >/dev/null 2>&1

    # Create worker if it doesn't exist
    WORKER_NAME="${PREFIX}-traderx-worker"
    if ! cub worker list --space ${PREFIX}-traderx 2>/dev/null | grep -q $WORKER_NAME; then
      echo "Creating ConfigHub worker..."
      cub worker create $WORKER_NAME --space ${PREFIX}-traderx
    fi

    # Install worker to Kubernetes
    echo "Installing worker to Kubernetes..."
    cub worker install $WORKER_NAME \
      --namespace confighub \
      --space ${PREFIX}-traderx \
      --include-secret \
      --export > /tmp/worker-manifest.yaml
    kubectl apply -f /tmp/worker-manifest.yaml >/dev/null 2>&1

    # Wait for worker to connect and register target
    TARGET_SLUG="k8s-${WORKER_NAME}"
    MAX_WAIT=30

    echo "Waiting for worker to connect and register target..."
    for i in $(seq 1 $MAX_WAIT); do
      if cub target list --space ${PREFIX}-traderx 2>/dev/null | grep -q "$TARGET_SLUG"; then
        echo "✅ Target registered (${i}s)"
        break
      fi

      if [ $((i % 5)) -eq 0 ]; then
        echo "  Still waiting... (${i}/${MAX_WAIT}s)"
      fi

      sleep 1

      if [ $i -eq $MAX_WAIT ]; then
        echo "❌ Timeout: Worker target did not register after ${MAX_WAIT} seconds"
        echo ""
        echo "Troubleshooting:"
        echo "  Check worker pod: kubectl get pods -n confighub | grep $WORKER_NAME"
        echo "  Check worker logs: kubectl logs -n confighub -l app=$WORKER_NAME"
        echo "  Check worker status: cub worker list --space ${PREFIX}-traderx"
        exit 1
      fi
    done

    # Set target on unit
    echo "Setting target on reference-data unit..."
    cub unit set-target reference-data $TARGET_SLUG --space ${PREFIX}-traderx
    if [ $? -ne 0 ]; then
      echo "❌ Error: Failed to set target on reference-data unit"
      exit 1
    fi

    # Apply unit
    echo "Applying reference-data unit..."
    cub unit apply reference-data --space ${PREFIX}-traderx
    if [ $? -ne 0 ]; then
      echo "❌ Error: Failed to apply reference-data unit"
      exit 1
    fi

    echo -e "${GREEN}✓ Deployed reference-data to ${PREFIX}-traderx${NC}"
    echo ""
    echo "Check status:"
    echo "  kubectl get deployments -n default"
    echo "  kubectl get pods -n default -l app=reference-data"
    echo "  kubectl logs -n default -l app=reference-data"
    ;;

  2)
    echo "Stage 2: Deploy only production"

    # Create worker and target
    cub worker create worker --space ${PREFIX}-traderx-prod 2>/dev/null || echo "Worker already exists"
    cub target create worker "{}" worker --space ${PREFIX}-traderx-prod 2>/dev/null || echo "Target already exists"

    # Install worker to Kubernetes (using pinned working image)
    echo "Installing worker to Kubernetes..."
    cub worker install worker --space ${PREFIX}-traderx-prod --export 2>&1 | \
      sed 's|ghcr.io/confighubai/confighub-worker:latest|ghcr.io/confighubai/confighub-worker@sha256:704352a1082163aee749c90b05223f882d8bacfd6e14981112b0d9f07b1d6fd0|g' | \
      kubectl apply -f - >/dev/null 2>&1 || true

    # Set target and apply
    cub unit set-target reference-data worker --space ${PREFIX}-traderx-prod || true
    cub unit apply reference-data --space ${PREFIX}-traderx-prod

    echo -e "${GREEN}✓ Deployed to ${PREFIX}-traderx-prod${NC}"
    echo -e "${YELLOW}Note: dev and staging are config-only (not deployed)${NC}"
    ;;

  3)
    echo "Stage 3: Deploy all regions with namespaces and links"

    # Deploy namespaces first (infrastructure)
    echo "Deploying namespaces..."
    cub worker create worker-infra --space ${PREFIX}-traderx-infra 2>/dev/null || echo "Worker already exists"
    cub target create worker-infra "{}" worker-infra --space ${PREFIX}-traderx-infra 2>/dev/null || echo "Target already exists"

    # Install infra worker
    cub worker install worker-infra --namespace confighub --space ${PREFIX}-traderx-infra --include-secret --export 2>&1 | \
      kubectl apply -f - >/dev/null 2>&1 || true

    # Wait briefly for infra worker to connect
    sleep 10

    # Deploy namespace units
    for region in us eu asia; do
      echo "  Deploying namespace for $region..."
      cub unit set-target ns-$region k8s-worker-infra --space ${PREFIX}-traderx-infra || true
      cub unit apply ns-$region --space ${PREFIX}-traderx-infra || true
    done

    # Deploy application units to each region
    for region in us eu asia; do
      echo "  Deploying apps to ${PREFIX}-traderx-prod-$region..."

      # Create worker and target
      cub worker create worker-$region --space ${PREFIX}-traderx-prod-$region 2>/dev/null || echo "Worker already exists"
      cub target create worker-$region "{}" worker-$region --space ${PREFIX}-traderx-prod-$region 2>/dev/null || echo "Target already exists"

      # Install worker to Kubernetes
      cub worker install worker-$region --namespace confighub --space ${PREFIX}-traderx-prod-$region --include-secret --export 2>&1 | \
        kubectl apply -f - >/dev/null 2>&1 || true

      # Wait for worker to connect
      sleep 10

      # Set targets and apply all units (Links will resolve namespaces)
      cub unit set-target reference-data k8s-worker-$region --space ${PREFIX}-traderx-prod-$region || true
      cub unit set-target trade-service k8s-worker-$region --space ${PREFIX}-traderx-prod-$region || true
      # Apply both units (WHERE clause doesn't support OR, only AND)
      cub unit apply --space ${PREFIX}-traderx-prod-$region --unit reference-data,trade-service || true
    done

    echo -e "${GREEN}✓ Deployed to all 3 regions with proper namespaces${NC}"
    echo ""
    echo "Verify deployment (each region has its own namespace):"
    echo "  kubectl get all -n ${PREFIX}-traderx-prod-us"
    echo "  kubectl get all -n ${PREFIX}-traderx-prod-eu"
    echo "  kubectl get all -n ${PREFIX}-traderx-prod-asia"
    echo ""
    echo "Verify regional scale:"
    echo "  kubectl get deploy trade-service -n ${PREFIX}-traderx-prod-us -o jsonpath='{.spec.replicas}'"
    echo "  kubectl get deploy trade-service -n ${PREFIX}-traderx-prod-eu -o jsonpath='{.spec.replicas}'"
    echo "  kubectl get deploy trade-service -n ${PREFIX}-traderx-prod-asia -o jsonpath='{.spec.replicas}'"
    ;;

  4)
    echo "Stage 4: Deploy with push-upgrade demo"

    # Deploy all regions
    for region in us eu asia; do
      echo "  Deploying to ${PREFIX}-traderx-prod-$region..."

      # Create worker and target
      cub worker create worker-$region --space ${PREFIX}-traderx-prod-$region 2>/dev/null || echo "Worker already exists"
      cub target create worker-$region "{}" worker-$region --space ${PREFIX}-traderx-prod-$region 2>/dev/null || echo "Target already exists"

      # Install worker to Kubernetes (using pinned working image)
      cub worker install worker-$region --space ${PREFIX}-traderx-prod-$region --export 2>&1 | \
        sed 's|ghcr.io/confighubai/confighub-worker:latest|ghcr.io/confighubai/confighub-worker@sha256:704352a1082163aee749c90b05223f882d8bacfd6e14981112b0d9f07b1d6fd0|g' | \
        kubectl apply -f - >/dev/null 2>&1 || true

      # Set targets and apply all units
      cub unit set-target worker-$region --space ${PREFIX}-traderx-prod-$region --where "Slug != ''" || true
      cub unit apply --space ${PREFIX}-traderx-prod-$region --where "Slug != ''"
    done

    echo ""
    echo -e "${YELLOW}Demo: Update base and push to regions${NC}"
    echo "  1. Update algorithm in base:"
    echo "     echo '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"trade-service\",\"env\":[{\"name\":\"TRADING_ALGORITHM\",\"value\":\"v2\"}]}]}}}}' | \\"
    echo "       cub unit update trade-service --space ${PREFIX}-traderx-base --patch --from-stdin"
    echo ""
    echo "  2. Push upgrade (keeps regional replicas!):"
    echo "     cub unit update --upgrade --patch --space 'traderx-prod-*'"
    echo ""
    echo -e "${GREEN}✓ Deployed with inheritance${NC}"
    ;;

  5)
    echo "Stage 5: Deploy + Find and Fix demo"
    ./deploy 4

    echo ""
    echo -e "${YELLOW}Find and Fix Examples:${NC}"
    echo "  Scale down EU after market close:"
    echo "    cub run set-replicas --replicas 2 \\"
    echo "      --space ${PREFIX}-traderx-prod-eu \\"
    echo "      --where \"spec.replicas > 2\""
    echo ""
    echo "  Find old versions:"
    echo "    cub unit list --space '*' \\"
    echo "      --where \"Data CONTAINS 'trade-service:v1'\""
    ;;

  6)
    echo "Stage 6: Deploy + Changeset demo"
    ./deploy 4

    echo ""
    echo -e "${YELLOW}Changeset Example (run manually):${NC}"
    echo "  # Both services must update together!"
    echo "  cub changeset create market-data-v2"
    echo "  echo '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"reference-data\",\"image\":\"traderx/reference-data:v2\"}]}}}}' | \\"
    echo "    cub unit update reference-data --space ${PREFIX}-traderx-prod-us --patch --from-stdin"
    echo "  echo '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"trade-service\",\"image\":\"traderx/trade-service:v2\"}]}}}}' | \\"
    echo "    cub unit update trade-service --space ${PREFIX}-traderx-prod-us --patch --from-stdin"
    echo "  cub changeset apply market-data-v2  # Atomic!"
    ;;

  7)
    echo "Stage 7: Deploy complete system"

    # Deploy dev/staging
    for env in dev staging; do
      echo "  Deploying to ${PREFIX}-traderx-$env..."

      # Create worker and target
      cub worker create worker-$env --space ${PREFIX}-traderx-$env 2>/dev/null || echo "Worker already exists"
      cub target create worker-$env "{}" worker-$env --space ${PREFIX}-traderx-$env 2>/dev/null || echo "Target already exists"

      # Install worker to Kubernetes (using pinned working image)
      cub worker install worker-$env --space ${PREFIX}-traderx-$env --export 2>&1 | \
        sed 's|ghcr.io/confighubai/confighub-worker:latest|ghcr.io/confighubai/confighub-worker@sha256:704352a1082163aee749c90b05223f882d8bacfd6e14981112b0d9f07b1d6fd0|g' | \
        kubectl apply -f - >/dev/null 2>&1 || true

      # Set targets and apply all units
      cub unit set-target worker-$env --space ${PREFIX}-traderx-$env --where "Slug != ''" || true
      cub unit apply --space ${PREFIX}-traderx-$env --where "Slug != ''"
    done

    # Deploy all regions
    for region in us eu asia; do
      echo "  Deploying to ${PREFIX}-traderx-prod-$region..."

      # Create worker and target
      cub worker create worker-$region --space ${PREFIX}-traderx-prod-$region 2>/dev/null || echo "Worker already exists"
      cub target create worker-$region "{}" worker-$region --space ${PREFIX}-traderx-prod-$region 2>/dev/null || echo "Target already exists"

      # Install worker to Kubernetes (using pinned working image)
      cub worker install worker-$region --space ${PREFIX}-traderx-prod-$region --export 2>&1 | \
        sed 's|ghcr.io/confighubai/confighub-worker:latest|ghcr.io/confighubai/confighub-worker@sha256:704352a1082163aee749c90b05223f882d8bacfd6e14981112b0d9f07b1d6fd0|g' | \
        kubectl apply -f - >/dev/null 2>&1 || true

      # Set targets and apply all units
      cub unit set-target worker-$region --space ${PREFIX}-traderx-prod-$region --where "Slug != ''" || true
      cub unit apply --space ${PREFIX}-traderx-prod-$region --where "Slug != ''"
    done

    echo -e "${GREEN}✓ Complete system deployed!${NC}"
    echo ""
    echo "Environments:"
    echo "  kubectl get deployments -n ${PREFIX}-traderx-dev"
    echo "  kubectl get deployments -n ${PREFIX}-traderx-staging"
    echo "  kubectl get deployments -n ${PREFIX}-traderx-prod-us"
    echo "  kubectl get deployments -n ${PREFIX}-traderx-prod-eu"
    echo "  kubectl get deployments -n ${PREFIX}-traderx-prod-asia"
    echo ""
    echo -e "${YELLOW}Emergency Bypass Example:${NC}"
    echo "  # Fix discovered in EU, push to Asia (skip US):"
    echo "  cub run set-env-var --env-var CIRCUIT_BREAKER=true \\"
    echo "    --unit trade-service --space ${PREFIX}-traderx-prod-eu"
    echo "  cub unit update trade-service --space ${PREFIX}-traderx-prod-asia \\"
    echo "    --merge-unit traderx-prod-eu/trade-service"
    ;;

  *)
    echo "Usage: $0 [stage]"
    echo "Stages: 1-7 (default: 7)"
    exit 1
    ;;
esac

echo ""
echo -e "${BLUE}Deployment complete!${NC}"
