#!/bin/bash
set -e

echo "üèóÔ∏è  MicroTraderX: Setting up ConfigHub structure..."
echo ""

# Color codes for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Stage selection
STAGE=${1:-7}

echo -e "${BLUE}Stage $STAGE: Setting up structure...${NC}"
echo ""

case $STAGE in
  1)
    echo "Stage 1: Hello TraderX - Single service, single space"
    cub space create traderx || true
    cub unit create --space traderx reference-data k8s/reference-data.yaml || true
    echo -e "${GREEN}‚úì Created traderx/reference-data${NC}"
    ;;

  2)
    echo "Stage 2: Three Environments"
    cub space create traderx || true
    cub unit create --space traderx reference-data k8s/reference-data.yaml || true

    for env in dev staging prod; do
      echo "  Creating traderx-$env..."
      cub space create traderx-$env || true
      cub unit copy reference-data --from traderx --to traderx-$env || true
    done
    echo -e "${GREEN}‚úì Created 3 environments (dev, staging, prod)${NC}"
    ;;

  3)
    echo "Stage 3: Three Regions with Custom Scale"
    cub space create traderx-prod || true
    cub unit create --space traderx-prod reference-data k8s/reference-data.yaml || true
    cub unit create --space traderx-prod trade-service k8s/trade-service.yaml || true

    for region in us eu asia; do
      echo "  Creating traderx-prod-$region..."
      cub space create traderx-prod-$region || true
      cub unit copy reference-data --from traderx-prod --to traderx-prod-$region || true
      cub unit copy trade-service --from traderx-prod --to traderx-prod-$region || true
    done

    # Regional customizations based on trading volume
    echo "  Customizing regional scale..."
    cub unit update trade-service --space traderx-prod-us \
      --patch '{"spec":{"replicas":3}}' || true  # NYSE hours
    cub unit update trade-service --space traderx-prod-eu \
      --patch '{"spec":{"replicas":5}}' || true  # Peak trading
    cub unit update trade-service --space traderx-prod-asia \
      --patch '{"spec":{"replicas":2}}' || true  # Overnight

    echo -e "${GREEN}‚úì Created 3 regions with custom scale${NC}"
    echo "  US: 3 replicas (NYSE hours)"
    echo "  EU: 5 replicas (Peak trading)"
    echo "  Asia: 2 replicas (Overnight)"
    ;;

  4)
    echo "Stage 4: Push-Upgrade with Inheritance"

    # Create base space
    cub space create traderx-base || true
    cub unit create --space traderx-base reference-data k8s/reference-data.yaml || true
    cub unit create --space traderx-base trade-service k8s/trade-service.yaml || true

    # Create regions with upstream links (canonical pattern)
    for region in us eu asia; do
      echo "  Creating traderx-prod-$region with inheritance..."
      cub space create traderx-prod-$region || true

      # Use space/slug notation (not unit IDs) - canonical pattern from acmetodo
      cub unit create reference-data \
        --space traderx-prod-$region \
        --upstream-space traderx-base \
        --upstream-unit reference-data \
        --data k8s/reference-data.yaml || true

      cub unit create trade-service \
        --space traderx-prod-$region \
        --upstream-space traderx-base \
        --upstream-unit trade-service \
        --data k8s/trade-service.yaml || true
    done

    # Regional customizations (preserved during upgrade!)
    echo "  Customizing regional scale (will be preserved)..."
    cub unit update trade-service --space traderx-prod-us \
      --patch '{"spec":{"replicas":3}}' || true
    cub unit update trade-service --space traderx-prod-eu \
      --patch '{"spec":{"replicas":5}}' || true
    cub unit update trade-service --space traderx-prod-asia \
      --patch '{"spec":{"replicas":2}}' || true

    echo -e "${GREEN}‚úì Created base + regions with inheritance${NC}"
    echo "  Regional scale will be preserved during upgrades!"
    ;;

  5)
    echo "Stage 5: Find and Fix - Bulk Operations"
    # Reuse Stage 4 structure
    ./setup-structure 4

    echo ""
    echo -e "${YELLOW}Find and Fix Examples:${NC}"
    echo "  Find high-replica services in EU:"
    echo "    cub unit list --space 'traderx-prod-eu' --where \"Data CONTAINS 'replicas: 5'\""
    echo ""
    echo "  Scale down after market close:"
    echo "    cub run set-replicas --replicas 2 --space traderx-prod-eu --where \"Data CONTAINS 'replicas: 5'\""
    ;;

  6)
    echo "Stage 6: Atomic Updates with Changesets"
    ./setup-structure 4

    echo ""
    echo -e "${YELLOW}Changeset Example:${NC}"
    echo "  Create changeset:"
    echo "    cub changeset create market-data-v2"
    echo "  Add related changes:"
    echo "    cub unit update reference-data --space traderx-prod-us --patch '{\"image\":\"v2\"}'"
    echo "    cub unit update trade-service --space traderx-prod-us --patch '{\"image\":\"v2\"}'"
    echo "  Apply atomically:"
    echo "    cub changeset apply market-data-v2"
    ;;

  7)
    echo "Stage 7: Complete System with All Features"

    # Create base
    cub space create traderx-base || true
    cub unit create --space traderx-base reference-data k8s/reference-data.yaml || true
    cub unit create --space traderx-base trade-service k8s/trade-service.yaml || true

    # Create dev/staging (canonical pattern)
    for env in dev staging; do
      echo "  Creating traderx-$env..."
      cub space create traderx-$env || true

      # Use space/slug notation (not unit IDs) - canonical pattern from acmetodo
      cub unit create reference-data \
        --space traderx-$env \
        --upstream-space traderx-base \
        --upstream-unit reference-data \
        --data k8s/reference-data.yaml || true

      cub unit create trade-service \
        --space traderx-$env \
        --upstream-space traderx-base \
        --upstream-unit trade-service \
        --data k8s/trade-service.yaml || true
    done

    # Create regions (canonical pattern)
    for region in us eu asia; do
      echo "  Creating traderx-prod-$region..."
      cub space create traderx-prod-$region || true

      # Use space/slug notation (not unit IDs) - canonical pattern from acmetodo
      cub unit create reference-data \
        --space traderx-prod-$region \
        --upstream-space traderx-base \
        --upstream-unit reference-data \
        --data k8s/reference-data.yaml || true

      cub unit create trade-service \
        --space traderx-prod-$region \
        --upstream-space traderx-base \
        --upstream-unit trade-service \
        --data k8s/trade-service.yaml || true
    done

    # Regional customizations
    echo "  Customizing regional scale..."
    cub unit update trade-service --space traderx-prod-us \
      --patch '{"spec":{"replicas":3}}' || true
    cub unit update trade-service --space traderx-prod-eu \
      --patch '{"spec":{"replicas":5}}' || true
    cub unit update trade-service --space traderx-prod-asia \
      --patch '{"spec":{"replicas":2}}' || true

    echo -e "${GREEN}‚úì Complete system created!${NC}"
    echo ""
    echo "Structure:"
    echo "  traderx-base/          (shared configs)"
    echo "  traderx-dev/           (development)"
    echo "  traderx-staging/       (staging)"
    echo "  traderx-prod-us/       (3 replicas - NYSE)"
    echo "  traderx-prod-eu/       (5 replicas - Peak)"
    echo "  traderx-prod-asia/     (2 replicas - Overnight)"
    ;;

  *)
    echo "Usage: $0 [stage]"
    echo "Stages: 1-7 (default: 7)"
    exit 1
    ;;
esac

echo ""
echo -e "${BLUE}Next: Run './deploy $STAGE' to deploy to Kubernetes${NC}"
